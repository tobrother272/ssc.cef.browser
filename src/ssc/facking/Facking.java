/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ssc.facking;

import org.cef.browser.CefBrowser;
import util.ToolSetting;

/**s
 * @author PC
 */
public class Facking {

    public static void faking(CefBrowser browser) {
        Facking.fakeUserAgent(ToolSetting.getInstance().userAgent, browser);
        Facking.fakeLocalHost(ToolSetting.getInstance().localIp, browser);
        Facking.fakeFont(browser);
        Facking.fakeAudioContext(browser);
        Facking.fakeCanvas(browser);
        Facking.fakeOpenGL(browser);
    }

    public static void fakeUserAgent(String userAgent, CefBrowser browser) {
        String jsFakeUseragent
                = "Object.defineProperty(Navigator.prototype, \"userAgent\", {\n"
                + "        get() {\n"
                + "            return '" + ToolSetting.getInstance().userAgent + "';\n"
                + "        }\n"
                + "    });"
                + "Object.defineProperty(Navigator.prototype, \"appName\", {\n"
                + "          get() {\n"
                + "              return  '" + ToolSetting.getInstance().appName + "';\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Navigator.prototype, \"product\", {\n"
                + "          get() {\n"
                + "              return  '" + ToolSetting.getInstance().product + "';\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Navigator.prototype, \"vendorSub\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().vendorSub + ";\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Navigator.prototype, \"platform\", {\n"
                + "          get() {\n"
                + "              return  '" + ToolSetting.getInstance().platform + "';\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Navigator.prototype, \"appCodeName\", {\n"
                + "          get() {\n"
                + "              return  '" + ToolSetting.getInstance().appCodeName + "';\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Navigator.prototype, \"productSub\", {\n"
                + "          get() {\n"
                + "              return  '" + ToolSetting.getInstance().productSub + "';\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Navigator.prototype, \"vendor\", {\n"
                + "          get() {\n"
                + "              return  '" + ToolSetting.getInstance().vendor + "';\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Navigator.prototype, \"deviceMemory\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().deviceMemory + ";\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Screen.prototype, \"availTop\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().availTop + ";\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Screen.prototype, \"colorDepth\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().colorDepth + ";\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Screen.prototype, \"pixelDepth\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().pixelDepth + ";\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Screen.prototype, \"availWidth\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().availWidth + ";\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Screen.prototype, \"height\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().height + ";\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Screen.prototype, \"availHeight\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().availHeight + ";\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Screen.prototype, \"width\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().width + ";\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Navigator.prototype, \"plugins\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().plugins + ";\n"
                + "          }"
                + " });"
                + "Object.defineProperty(Navigator.prototype, \"mimeTypes\", {\n"
                + "          get() {\n"
                + "              return  " + ToolSetting.getInstance().mimes + ";\n"
                + "          }"
                + " });";
        browser.executeJavaScript(jsFakeUseragent, browser.getURL(), 0);
    }
    public static void fakeLocalHost(String localHost, CefBrowser browser) {
        String jsLocalIp
                = "const createOffer = RTCPeerConnection.prototype.createOffer;\n"
                + "    Object.defineProperty(RTCPeerConnection.prototype, \"createOffer\", {\n"
                + "        \"value\": function () {\n"
                + "            var onicecandidate = this.onicecandidate;\n"
                + "            this.onicecandidate = function (evt) {\n"
                + "                evt.candidate.candidate = evt.candidate.candidate.replace(evt.candidate.candidate.split(\" \")[4], '" + localHost + "');\n"
                + "                onicecandidate(evt);\n"
                + "            };\n"
                + "            return createOffer.apply(this, arguments);\n"
                + "        }\n"
                + "    });\n";
        browser.executeJavaScript(jsLocalIp, browser.getURL(), 0);

    }

    public static void fakeCanvas(CefBrowser browser) {
        String casvas = "  var injectCanvas = function () {\n"
                + "    const toBlob = HTMLCanvasElement.prototype.toBlob;\n"
                + "    const toDataURL = HTMLCanvasElement.prototype.toDataURL;\n"
                + "    const getImageData = CanvasRenderingContext2D.prototype.getImageData;"
                + "     var noisify = function (canvas, context) {\n"
                + "        const shift = {\n"
                + "            'r': Math.floor(" + ToolSetting.getInstance().canvasNoiseR + " * 10) - 5,\n"
                + "            'g': Math.floor(" + ToolSetting.getInstance().canvasNoiseG + " * 10) - 5,\n"
                + "            'b': Math.floor(" + ToolSetting.getInstance().canvasNoiseB + " * 10) - 5,\n"
                + "            'a': Math.floor(" + ToolSetting.getInstance().canvasNoiseA + " * 10) - 5\n"
                + "        };\n"
                + "        const width = canvas.width, height = canvas.height;\n"
                + "        const imageData = getImageData.apply(context, [0, 0, width, height]);\n"
                + "        for (let i = 0; i < height; i++) {\n"
                + "            for (let j = 0; j < width; j++) {\n"
                + "                const n = ((i * (width * 4)) + (j * 4));\n"
                + "                imageData.data[n + 0] = imageData.data[n + 0] +shift.r;\n"
                + "                imageData.data[n + 1] = imageData.data[n + 1] +shift.g;\n"
                + "                imageData.data[n + 2] = imageData.data[n + 2] +shift.b;\n"
                + "                imageData.data[n + 3] = imageData.data[n + 3] +shift.a;\n"
                + "            }\n"
                + "        };\n"
                + "        context.putImageData(imageData, 0, 0);\n"
                + "  };\n"
                + "  Object.defineProperty(HTMLCanvasElement.prototype, \"toBlob\", {\n"
                + "        \"value\": function () {\n"
                + "            noisify(this, this.getContext(\"2d\"));\n"
                + "            return toBlob.apply(this, arguments);\n"
                + "        }\n"
                + "  });"
                + "  Object.defineProperty(HTMLCanvasElement.prototype, \"toDataURL\", {\n"
                + "        \"value\": function () {\n"
                + "            noisify(this, this.getContext(\"2d\"));\n"
                + "            return toDataURL.apply(this, arguments);\n"
                + "        }\n"
                + "    });"
                + "  Object.defineProperty(CanvasRenderingContext2D.prototype, \"getImageData\", {\n"
                + "        \"value\": function () {\n"
                + "            noisify(this.canvas, this);\n"
                + "            return getImageData.apply(this, arguments);\n"
                + "        }\n"
                + "    });\n"
                + " }\n"
                + "         injectCanvas();"
                + "	    for (var i = 0; i < [...window.top.document.querySelectorAll(\"iframe[sandbox]\")].length; i++) {\n"
                + "	      if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow) {\n"
                + "	        if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.CanvasRenderingContext2D) {\n"
                + "	          [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.CanvasRenderingContext2D.prototype.getImageData = CanvasRenderingContext2D.prototype.getImageData;\n"
                + "	        }\n"
                + "	        if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.HTMLCanvasElement) {\n"
                + "	          [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.HTMLCanvasElement.prototype.toBlob = HTMLCanvasElement.prototype.toBlob;\n"
                + "	          [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.HTMLCanvasElement.prototype.toDataURL = HTMLCanvasElement.prototype.toDataURL;\n"
                + "	        }\n"
                + "	      }\n"
                + "	    }\n"
                + "    ";
        browser.executeJavaScript(casvas, browser.getURL(), 0);

    }

    public static void fakeFont(CefBrowser browser) {
        String font = "  var injectFont = function () {\n"
                + "     Object.defineProperty(HTMLElement.prototype, \"offsetHeight\", {\n"
                + "        get() {\n"
                + "            const height = Math.floor(this.getBoundingClientRect().height);\n"
                + "            if (height % 2 == 0) {\n"
                + "                result = height + " + ToolSetting.getInstance().font_offset.toArray()[0] + ";\n"
                + "            }\n"
                + "            if (height % 3 == 0) {\n"
                + "                result = height + " + ToolSetting.getInstance().font_offset.toArray()[1] + ";\n"
                + "            }\n"
                + "            if (height % 4 == 0) {\n"
                + "                result = height + " + ToolSetting.getInstance().font_offset.toArray()[2] + ";\n"
                + "            }\n"
                + "            if (height % 5 == 0) {\n"
                + "                result = height + " + ToolSetting.getInstance().font_offset.toArray()[3] + ";\n"
                + "            }\n"
                + "            return result;\n"
                + "        }\n"
                + "    });"
                + "       Object.defineProperty(HTMLElement.prototype, \"offsetWidth\", {\n"
                + "        get() {\n"
                + "            const width = Math.floor(this.getBoundingClientRect().width);\n"
                + "            //const valid = width && rand.sign() === 1;\n"
                + "            //const result = valid ? width + rand.noise() : width;\n"
                + "            if (width % 2 == 0) {\n"
                + "                result = width + " + ToolSetting.getInstance().font_offset.toArray()[4] + ";\n"
                + "            }\n"
                + "            if (width % 3 == 0) {\n"
                + "                result = width + " + ToolSetting.getInstance().font_offset.toArray()[5] + ";\n"
                + "            }\n"
                + "            if (width % 4 == 0) {\n"
                + "                result = width + " + ToolSetting.getInstance().font_offset.toArray()[6] + ";\n"
                + "            }\n"
                + "            if (width % 5 == 0) {\n"
                + "                result = width + " + ToolSetting.getInstance().font_offset.toArray()[7] + ";\n"
                + "            }\n"
                + "            return result;\n"
                + "        }\n"
                + "    }); "
                + "}\n"
                + "       injectFont();";
        browser.executeJavaScript(font, browser.getURL(), 0);

    }

    public static void fakeAudioContext(CefBrowser browser) {
        String audioContext = "  var injectAudio = function () {\n"
                + "       const context = {\n"
                + "    \"BUFFER\": null,\n"
                + "    \"getChannelData\": function (e) {\n"
                + "      const getChannelData = e.prototype.getChannelData;\n"
                + "      Object.defineProperty(e.prototype, \"getChannelData\", {\n"
                + "        \"value\": function () {\n"
                + "          const results_1 = getChannelData.apply(this, arguments);\n"
                + "          if (context.BUFFER !== results_1) {\n"
                + "            context.BUFFER = results_1;\n"
                + "            for (var i = 0; i < results_1.length; i += 100) {\n"
                + "              let index = Math.floor(" + ToolSetting.getInstance().audioContext_1 + " * i);\n"
                + "              results_1[index] = results_1[index] + " + ToolSetting.getInstance().audioContext_2 + " * 0.0000001;\n"
                + "            }\n"
                + "          }\n"
                + "          return results_1;\n"
                + "        }\n"
                + "      });\n"
                + "    },\n" 
                + "    \"createAnalyser\": function (e) {\n"
                + "      const createAnalyser = e.prototype.__proto__.createAnalyser;\n"
                + "      Object.defineProperty(e.prototype.__proto__, \"createAnalyser\", {\n"
                + "        \"value\": function () {\n"
                + "          const results_2 = createAnalyser.apply(this, arguments);\n"
                + "          const getFloatFrequencyData = results_2.__proto__.getFloatFrequencyData;\n"
                + "          Object.defineProperty(results_2.__proto__, \"getFloatFrequencyData\", {\n"
                + "            \"value\": function () {\n"
                + "              const results_3 = getFloatFrequencyData.apply(this, arguments);\n"
                + "              for (var i = 0; i < arguments[0].length; i += 100) {\n"
                + "                let index = Math.floor(" + ToolSetting.getInstance().audioContext_3 + " * i);\n"
                + "                arguments[0][index] = arguments[0][index] + " + ToolSetting.getInstance().audioContext_4 + " * 0.1;\n"
                + "              }\n"
                + "              return results_3;\n"
                + "            }\n"
                + "          });\n"
                + "          //\n"
                + "          return results_2;\n"
                + "        }\n"
                + "      });\n"
                + "    },\n"
                + "  };"
                + "       context.getChannelData(AudioBuffer);\n"
                + "       context.createAnalyser(AudioContext);\n"
                + "       context.getChannelData(OfflineAudioContext);\n"
                + "       context.createAnalyser(OfflineAudioContext);\n"

                + "\n"
                + "       //alert(context);\n"
                + " };\n"
                + "         injectAudio();\n"
                + "	    for (var i = 0; i < [...window.top.document.querySelectorAll(\"iframe[sandbox]\")].length; i++) {\n"
                + "	       if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow) {\n"
                + " if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.AudioBuffer) {\n"
                + "          if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.AudioBuffer.prototype) {\n"
                + "            if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.AudioBuffer.prototype.getChannelData) {\n"
                + "              [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.AudioBuffer.prototype.getChannelData = AudioBuffer.prototype.getChannelData;\n"
                + "            }\n"
                + "          }\n"
                + "        }"
                + "if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.AudioContext) {\n"
                + "          if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.AudioContext.prototype) {\n"
                + "            if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.AudioContext.prototype.__proto__) {\n"
                + "              if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.AudioContext.prototype.__proto__.createAnalyser) {\n"
                + "                [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.AudioContext.prototype.__proto__.createAnalyser = AudioContext.prototype.__proto__.createAnalyser;\n"
                + "              }\n"
                + "            }\n"
                + "          }\n"
                + "        }"
                + "if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.OfflineAudioContext) {\n"
                + "          if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.OfflineAudioContext.prototype) {\n"
                + "            if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.OfflineAudioContext.prototype.__proto__) {\n"
                + "              if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.OfflineAudioContext.prototype.__proto__.createAnalyser) {\n"
                + "                [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.OfflineAudioContext.prototype.__proto__.createAnalyser = OfflineAudioContext.prototype.__proto__.createAnalyser;\n"
                + "              }\n"
                + "            }\n"
                + "          }\n"
                + "        }"
                + " if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.OfflineAudioContext) {\n"
                + "          if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.OfflineAudioContext.prototype) {\n"
                + "            if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.OfflineAudioContext.prototype.__proto__) {\n"
                + "              if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.OfflineAudioContext.prototype.__proto__.getChannelData) {\n"
                + "                [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.OfflineAudioContext.prototype.__proto__.getChannelData = OfflineAudioContext.prototype.__proto__.getChannelData;\n"
                + "              }\n"
                + "            }\n"
                + "          }\n"
                + "   }"
                + "	      }\n"
                + "	    }\n";
        browser.executeJavaScript(audioContext, browser.getURL(), 0);

    }

    public static void fakeOpenGL(CefBrowser browser) {
        String font = "  var injectOpenGL = function () {\n"
                + "var config = {\n"
                + "        \"random\": {\n"
                + "            \"value\": function () {\n"
                + "                return Math.random()\n"
                + "            },\n"
                + "            \"item\": function (e) {\n"
                + "                var rand = e.length * config.random.value();\n"
                + "                return e[Math.floor(rand)];\n"
                + "            },\n"
                + "            \"array\": function (e) {\n"
                + "                var rand = config.random.item(e);\n"
                + "                return new Int32Array([rand, rand]);\n"
                + "            },\n"
                + "            \"items\": function (e, n) {\n"
                + "                var length = e.length;\n"
                + "                var result = new Array(n);\n"
                + "                var taken = new Array(length);\n"
                + "                if (n > length) n = length;\n"
                + "                //\n"
                + "                while (n--) {\n"
                + "                    var i = Math.floor(config.random.value() * length);\n"
                + "                    result[n] = e[i in taken ? taken[i] : i];\n"
                + "                    taken[i] = --length in taken ? taken[length] : length;\n"
                + "                }\n"
                + "                //\n"
                + "                return result;\n"
                + "            }\n"
                + "        },\n"
                + "        \"spoof\": {\n"
                + "            \"webgl\": {\n"
                + "                \"buffer\": function (target) {\n"
                + "                    const bufferData = target.prototype.bufferData;\n"
                + "                    Object.defineProperty(target.prototype, \"bufferData\", {\n"
                + "                        \"value\": function () {\n"
                + "                            var index = Math.floor("+ToolSetting.getInstance().webglNoise+" * 10);\n"
                + "                            var noise = 0.1 * "+ToolSetting.getInstance().webglNoise+" * arguments[1][index];\n"
                + "                            arguments[1][index] = arguments[1][index] + noise;\n"
                + "                            //\n"
                + "                            return bufferData.apply(this, arguments);\n"
                + "                        }\n"
                + "                    });\n"
                + "                },\n"
                + "                \"parameter\": function (target) {\n"
                + "                    const getParameter = target.prototype.getParameter;\n"
                + "                    Object.defineProperty(target.prototype, \"getParameter\", {\n"
                + "                        \"value\": function () {\n"
                + "                            var float32array = new Float32Array([1, 8192]);\n"
                + "                            if (arguments[0] === 3415) return " + ToolSetting.getInstance().openGL_stencilBits + " ;\n"
                + "                            else if (arguments[0] === 3414) return " + ToolSetting.getInstance().openGL_depthBits + " ;\n"
                + "                            else if (arguments[0] === 7938) return \"" + ToolSetting.getInstance().openGL_version + "\";\n"
                + "                            else if (arguments[0] === 35661) return " + ToolSetting.getInstance().openGL_maxCombinedTextureImageUnits + " ;\n"
                + "                            else if (arguments[0] === 37446) return '" + ToolSetting.getInstance().openGL_unmaskedRenderer + "' ;\n"
                + "                            else if (arguments[0] === 3386) return new Int32Array([" + ToolSetting.getInstance().webgl_3386 + "," + ToolSetting.getInstance().webgl_3386 + "]);\n"
                + "                            else if (arguments[0] === 36347) return " + ToolSetting.getInstance().openGL_maxVertexUniformVectors + " ;\n"
                + "                            else if (arguments[0] === 36349) return " + ToolSetting.getInstance().openGL_maxFragmentUniformVectors + " ;\n"
                + "                            else if (arguments[0] === 34047) return " + ToolSetting.getInstance().openGL_maxAnisotropy + ";\n"
                + "                            else if (arguments[0] === 34921) return " + ToolSetting.getInstance().openGL_maxVertexAttribs + ";\n"
                + "                            else if (arguments[0] === 7937) return '" + ToolSetting.getInstance().openGL_renderer + "';\n"
                + "                            else if (arguments[0] === 35724) return '" + ToolSetting.getInstance().openGL_shadingLanguage + "';\n"
                + "                            else if (arguments[0] === 7936) return '" + ToolSetting.getInstance().openGL_vendor + "';\n"
                
                //+ "                            else if (arguments[0] === 33901) return " + ToolSetting.getInstance().openGL_renderer + ";\n"
                //+ "                            else if (arguments[0] === 33902) return " + ToolSetting.getInstance().openGL_renderer + ";\n"
                + "                            else if (arguments[0] === 34930) return " + ToolSetting.getInstance().openGL_maxTextureImageUnits + ";\n"
                + "                            else if (arguments[0] === 36348) return " + ToolSetting.getInstance().openGL_maxVaryingVectors + ";\n"
                + "                            else if (arguments[0] === 35660) return " + ToolSetting.getInstance().openGL_maxVertexTextureImageUnits + ";\n"
                + "                            else if (arguments[0] === 34076) return " + ToolSetting.getInstance().openGL_maxCubeMapTextureSize + ";\n"
                + "                            else if (arguments[0] === 34024) return " + ToolSetting.getInstance().openGL_maxRenderBufferSize + ";\n"
                + "                            else if (arguments[0] === 3379) return " + ToolSetting.getInstance().openGL_maxTextureSize + ";\n"
                + "                            else if (arguments[0] === 3413) return " + ToolSetting.getInstance().openGL_alphaBits + ";\n"
                + "                            else if (arguments[0] === 3412) return " + ToolSetting.getInstance().openGL_blueBits + ";\n"
                + "                            else if (arguments[0] === 3411) return " + ToolSetting.getInstance().openGL_greenBits + ";\n"
                + "                            else if (arguments[0] === 3410) return " + ToolSetting.getInstance().openGL_redBits + ";\n"
                + "                            //\n"
                + "                            return getParameter.apply(this, arguments);\n"
                + "                        }\n"
                + "                    });\n"
                + "                },\n"
                                + "\"supportedExtensions\": function (target) {\n"
                + "                    const getSupportedExtensions = target.prototype.getSupportedExtensions;\n"
                + "                    Object.defineProperty(target.prototype, \"getSupportedExtensions\", {\n"
                + "                        \"value\": function () {\n"
                + "                            return "+ToolSetting.getInstance().openGL_exts+" ;\n"
                + "                        }\n"
                + "                    });\n"
                + "                },\n"
                + "            }\n"
                + "        }\n"
                + "    };\n"
                + "    //\n"
                + "    config.spoof.webgl.buffer(WebGLRenderingContext);\n"
                + "    config.spoof.webgl.buffer(WebGL2RenderingContext);\n"
                + "    config.spoof.webgl.parameter(WebGLRenderingContext);\n"
                + "    config.spoof.webgl.parameter(WebGL2RenderingContext);\n"
                + "    config.spoof.webgl.supportedExtensions(WebGLRenderingContext);\n"
                + "    config.spoof.webgl.supportedExtensions(WebGL2RenderingContext);\n"
                + "}\n"
                + "       injectOpenGL();"
                + "	    for (var i = 0; i < [...window.top.document.querySelectorAll(\"iframe[sandbox]\")].length; i++) {\n"
                + "	      if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow) {\n"
                + "	        if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.WebGLRenderingContext) {\n"
                + "	          [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.WebGLRenderingContext.prototype.bufferData = WebGLRenderingContext.prototype.bufferData;\n"
                + "	          [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.WebGLRenderingContext.prototype.getParameter = WebGLRenderingContext.prototype.getParameter;\n"
                + "	          [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.WebGLRenderingContext.prototype.getSupportedExtensions = WebGLRenderingContext.prototype.getSupportedExtensions;\n"
                + "	        }\n"
                + "	        if ([...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.WebGL2RenderingContext) {\n"
                + "	          [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.WebGL2RenderingContext.prototype.bufferData = WebGL2RenderingContext.prototype.bufferData;\n"
                + "	          [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.WebGL2RenderingContext.prototype.getParameter = WebGL2RenderingContext.prototype.getParameter;\n"
                + "	          [...window.top.document.querySelectorAll(\"iframe[sandbox]\")][i].contentWindow.WebGL2RenderingContext.prototype.getSupportedExtensions = WebGL2RenderingContext.prototype.getSupportedExtensions;\n"
                + "	        }\n"
                + "	      }\n"
                + "	    }\n"
                + "    ";
        browser.executeJavaScript(font, browser.getURL(), 0);

    }

}
